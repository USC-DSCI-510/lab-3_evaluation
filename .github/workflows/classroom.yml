name: GitHub Classroom Workflow

on: 
    push:
        branches:
            - main
            - auto-grader-test-**
    workflow_dispatch:

permissions:
    checks: write
    actions: read
    contents: read

jobs:
    run-auto-grade:
        name: Autograding
        runs-on: ubuntu-20.04

        outputs:
          bonus_points_gained: ${{ steps.set_bonus_points.outputs.bonus_points_gained }}
          pytest_logs: ${{ steps.set_pytest_log.outputs.pytest_logs }}

        steps:
            - uses: actions/checkout@v3
            
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.x'

            - name: Install dependencies
              run: pip install flake8 black pytest

            - name: Format with Black
              run: |
                black lab3.py --preview --line-length=100
              continue-on-error: true

            - name: Lint with Flake8
              id: bonus_pep8_linter_check_flake8
              run: |
                flake8 lab3.py --max-line-length=100 --ignore=E402,E302,E305,E266,E203,W503,E722,E712
              continue-on-error: true

            - name: Set Bonus Points
              id: set_bonus_points
              run: |
                if [[ ${{ steps.bonus_pep8_linter_check_flake8.outcome }} == 'success' ]]; then
                  bonus_points=5
                else
                  bonus_points=0
                fi
                echo "bonus_points_gained=$bonus_points" >> "$GITHUB_OUTPUT"
              continue-on-error: true

            - name: Run the Grading Script
              run: pytest -v
              continue-on-error: true

            - name: Save test logs to job output
              id: set_pytest_log
              run: |
                # Saving to the log file
                pytest -v --no-header > output.log

                # Setting it as environment variable
                pytest_logs=$(cat output.log)

                EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
                echo "pytest_logs<<$EOF" >> $GITHUB_OUTPUT
                echo "$pytest_logs" >> $GITHUB_OUTPUT
                echo "$EOF" >> $GITHUB_OUTPUT
              continue-on-error: true

    generate-report:
        name: Grading Report Generation
        runs-on: ubuntu-latest

        needs: run-auto-grade
    
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_RUN_ID: ${{ github.run_id }}

          bonus_points_gained: ${{ needs.run-auto-grade.outputs.bonus_points_gained }}
          pytest_logs: ${{ needs.run-auto-grade.outputs.pytest_logs }}

        outputs:
          points_gained: ${{ steps.marks.outputs.points_gained }}
          max_points_possible: ${{ steps.marks.outputs.max_points_possible }}
          total_points_obtained: ${{ steps.marks.outputs.total_points_obtained }}
          scaled_points: ${{ steps.marks.outputs.scaled_points }}
          scaled_max_points_possible: ${{ steps.marks.outputs.scaled_max_points_possible }}
          max_bonus_points_possible: ${{ steps.marks.outputs.max_bonus_points_possible }}
          bonus_points_gained: ${{ needs.run-auto-grade.outputs.bonus_points_gained }}

          student_login: ${{ steps.student-metadata.outputs.student_login }}
          repo_name: ${{ steps.student-metadata.outputs.repo_name }}
          repo_url: ${{ steps.student-metadata.outputs.repo_url }}
          # name_with_owner: ${{ steps.student-metadata.outputs.name_with_owner }}
          username: ${{ steps.student-metadata.outputs.username }}

        steps:
          - uses: actions/checkout@v3
    
          - name: Extract Marks from logs
            id: marks
            run: |
              pytest_logs=$(echo $pytest_logs | sed 's/\x1B\[[0-9;]*[JKmsu]//g')

              max_points_possible=$(echo $pytest_logs | grep -oP "collected \K\d+")
    
              points_gained=$(echo $pytest_logs | grep -o "PASSED" | wc -l)
    
              scaled_points=$((points_gained/$max_points_possible * 30))
              scaled_max_points_possible=30
              max_bonus_points_possible=5
              total_points_obtained=$((scaled_points + $bonus_points_gained))
    
              echo "points_gained=$points_gained" >> "$GITHUB_ENV"
              echo "max_points_possible=$max_points_possible" >> "$GITHUB_ENV"
              echo "total_points_obtained=$total_points_obtained" >> "$GITHUB_ENV"
              echo "scaled_points=$scaled_points" >> "$GITHUB_ENV"
              echo "scaled_max_points_possible=$scaled_max_points_possible" >> "$GITHUB_ENV"
              echo "max_bonus_points_possible=$max_bonus_points_possible" >> "$GITHUB_ENV"

              echo "points_gained=$points_gained" >> "$GITHUB_OUTPUT"
              echo "max_points_possible=$max_points_possible" >> "$GITHUB_OUTPUT"
              echo "total_points_obtained=$total_points_obtained" >> "$GITHUB_OUTPUT"
              echo "scaled_points=$scaled_points" >> "$GITHUB_OUTPUT"
              echo "scaled_max_points_possible=$scaled_max_points_possible" >> "$GITHUB_OUTPUT"
              echo "max_bonus_points_possible=$max_bonus_points_possible" >> "$GITHUB_OUTPUT"
    
          - name: Fetch Student Metadata
            id: student-metadata
            run: |
              # Fetch student metadata
              student_login=$(gh repo view $GITHUB_REPOSITORY --json owner -q '.owner.login')
              repo_name=$(basename "$GITHUB_REPOSITORY")
              repo_url=$(gh repo view $GITHUB_REPOSITORY --json url -q '.url')
              # name_with_owner=$(gh repo view $GITHUB_REPOSITORY --json nameWithOwner -q '.nameWithOwner')

              username="${repo_name#*_}"
    
              echo "student_login=$student_login" >> "$GITHUB_ENV"
              echo "repo_name=$repo_name" >> "$GITHUB_ENV"
              echo "repo_url=$repo_url" >> "$GITHUB_ENV"
              # echo "name_with_owner=$name_with_owner" >> "$GITHUB_ENV"
              echo "username=$username" >> "$GITHUB_ENV"

              echo "student_login=$student_login" >> "$GITHUB_OUTPUT"
              echo "repo_name=$repo_name" >> "$GITHUB_OUTPUT"
              echo "repo_url=$repo_url" >> "$GITHUB_OUTPUT"
              # echo "name_with_owner=$name_with_owner" >> "$GITHUB_OUTPUT"
              echo "username=$username" >> "$GITHUB_OUTPUT"
    
          - name: Create Job Summary
            run: |
                echo "## Comprehensive Evaluation Summary" >> $GITHUB_STEP_SUMMARY
                echo "---"
                echo "### Grading Report" >> $GITHUB_STEP_SUMMARY
                echo "|                    | Obtained                | Max Possible                 |" >> $GITHUB_STEP_SUMMARY
                echo "|--------------------|-------------------------|------------------------------|" >> $GITHUB_STEP_SUMMARY
                echo "| Points             | $points_gained          | $max_points_possible         |" >> $GITHUB_STEP_SUMMARY
                echo "| Scaled Points      | $scaled_points          | $scaled_max_points_possible  |" >> $GITHUB_STEP_SUMMARY
                echo "| Bonus Points       | $bonus_points_gained    | $max_bonus_points_possible   |" >> $GITHUB_STEP_SUMMARY
                echo "|--------------------|-------------------------|------------------------------|" >> $GITHUB_STEP_SUMMARY
                echo "| Total Points       | $total_points_obtained  | $scaled_max_points_possible  |" >> $GITHUB_STEP_SUMMARY
    
                echo "> Detailed Feedback - Summary of Test Cases" >> $GITHUB_STEP_SUMMARY
                echo "> [View Logs](https://github.com/$name_with_owner/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY
                
                echo "### Student Metadata" >> $GITHUB_STEP_SUMMARY
                echo "| Name                 | Description            |" >> $GITHUB_STEP_SUMMARY
                echo "|----------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
                echo "| Student Login        | $student_login         |" >> $GITHUB_STEP_SUMMARY
                echo "| Repository Name      | $repo_name             |" >> $GITHUB_STEP_SUMMARY
                echo "| User Name            | $username              |" >> $GITHUB_STEP_SUMMARY
                echo "| Repository URL       | [$repo_url]($repo_url) |" >> $GITHUB_STEP_SUMMARY
